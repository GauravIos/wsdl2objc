#summary Instructions on how to use the generated code from WSDL2ObjC
#labels Featured

Once you obtain WSDL2ObjC, code generation is pretty simple.

  # Launch the app
  # Browse to a WSDL file or enter in a URL
  # Browse to an output directory
  # Click "Parse WSDL"

Source code files will be added to the output directory you've specified.  There will be one pair of .h/.m files for each namespace in your WSDL.

You can add the output files to your project or create a web service framework from them.  Each project that uses the generated web service code will need to link against libxml2 by performing the following for each target in your XCode project:

  # Get info on the target and go to the build tab
  # Add "-lxml2" to the Other Linker Flags property
  # Add "-I/usr/include/libxml2" to the Other C Flags property

If you are building an iPhone project also perform the following:

 # Right click on the Frameworks folder in your project and select Add -> Existing Frameworks...
 # Select the CFNetwork.framework appropriate for your iPhone build

You can use a given web service as follows:

{{{
#import "MyWebService.h"

MyWebServiceBinding *binding = [MyWebService MyWebServiceBinding];
binding.logXMLInOut = YES;

ns1_MyOperationRequest *request = [[ns1_MyOperationRequest new] autorelease];
request.attribute = @"attributeValue";
request.element = [[ns1_MyElement new] autorelease];
request.element.value = @"elementValue"];

MyWebServiceBindingResponse *response = [binding myOperationUsingParameters:request];

NSArray *responseHeaders = response.headers;
NSArray *responseBodyParts = response.bodyParts;

for(id header in responseHeaders) {
  if([header isKindOfClass:[ns2_MyHeaderResponse class]]) {
    ns2_MyHeaderResponse *headerResponse = (ns2_MyHeaderResponse*)header;
    
    // ... Handle ns2_MyHeaderResponse ...
  }
}

for(id bodyPart in responseBodyParts) {
  if([bodyPart isKindOfClass:[ns2_MyBodyResponse class]]) {
    ns2_MyBodyResponse *body = (ns2_MyBodyResponse*)bodyPart;
    
    // ... Handle ns2_MyBodyResponse ...
  }
}
}}}

----
Here's another code sample:
Assume the following:
  * A SOAP service called "Friends"
  * A SOAP method called GetFavoriteColor that has a request attribute called Friend, and a response attribute called Color (i.e. you're asking it to return you the favorite color for a given a friend)
  * All the methods in this service need HTTP authentication, using a username and password that you acquired from the user via text fields

{{{
- (IBAction)pressedRequestButton:(id)sender {
	FriendsBinding *bFriends = [[FriendsService FriendsBinding] retain];
	bFriends.logXMLInOut = YES;
	bFriends.authUsername = u.text;
	bFriends.authPassword = p.text;
	types_getFavoriteColorRequestType *cRequest = [[types_getFavoriteColorRequestType new] autorelease];
	cRequest.friend = @"Johnny";
	[bFriends getFavoriteColorAsyncUsingRequest:cRequest delegate:self];
}

- (void) operation:(FriendsBindingOperation *)operation completedWithResponse:(FriendsBindingResponse *)response
{
	NSArray *responseHeaders = response.headers;
	NSArray *responseBodyParts = response.bodyParts;
	
	for(id header in responseHeaders) {
		// here do what you want with the headers, if there's anything of value in them
	}
	
	for(id bodyPart in responseBodyParts) {
		/****
		 * SOAP Fault Error
		 ****/
		if ([bodyPart isKindOfClass:[SOAPFault class]]) {
			// You can get the error like this:
			tV.text = ((SOAPFault *)bodyPart).simpleFaultString;
			continue;
		}
		
		/****
		 * Get Favorite Color
		 ****/		
		if([bodyPart isKindOfClass:[types_getFavoriteColorResponseType class]]) {
			types_getFavoriteColorResponseType *body = (types_getFavoriteColorResponseType*)bodyPart;
			// Now you can extract the color from the response
			q.text = body.color;
			continue;
		}
// ...
}
}}}